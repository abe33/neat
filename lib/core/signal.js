// Generated by CoffeeScript 1.3.3
(function() {
  var Signal;

  Signal = (function() {

    function Signal() {
      this.listeners = [];
    }

    Signal.prototype.add = function(listener, context, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (!this.registered(listener, context)) {
        this.listeners.push([listener, context, false, priority]);
        return this.sortListeners();
      }
    };

    Signal.prototype.addOnce = function(listener, context, priority) {
      if (priority == null) {
        priority = 0;
      }
      if (!this.registered(listener, context)) {
        this.listeners.push([listener, context, true, priority]);
        return this.sortListeners();
      }
    };

    Signal.prototype.remove = function(listener, context) {
      if (this.registered(listener, context)) {
        return this.listeners.splice(this.indexOf(listener, context), 1);
      }
    };

    Signal.prototype.removeAll = function() {
      return this.listeners = [];
    };

    Signal.prototype.indexOf = function(listener, context) {
      var c, i, l, _i, _len, _ref, _ref1;
      _ref = this.listeners;
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        _ref1 = _ref[i], l = _ref1[0], c = _ref1[1];
        if (listener === l && context === c) {
          return i;
        }
      }
      return -1;
    };

    Signal.prototype.registered = function(listener, context) {
      return this.indexOf(listener, context) !== -1;
    };

    Signal.prototype.hasListeners = function() {
      return this.listeners.length !== 0;
    };

    Signal.prototype.sortListeners = function() {
      if (this.listeners.length <= 1) {
        return;
      }
      return this.listeners.sort(function(a, b) {
        var pA, pB, _ref;
        _ref = [a[3], b[3]], pA = _ref[0], pB = _ref[1];
        if (pA < pB) {
          return 1;
        } else if (pB < pA) {
          return -1;
        } else {
          return 0;
        }
      });
    };

    Signal.prototype.dispatch = function() {
      var args, listeners, next, o,
        _this = this;
      args = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = arguments.length; _i < _len; _i++) {
          o = arguments[_i];
          _results.push(o);
        }
        return _results;
      }).apply(this, arguments);
      listeners = this.listeners.concat();
      next = function() {
        var context, isAsync, listener, once, priority, _ref;
        if (listeners.length) {
          _ref = listeners.shift(), listener = _ref[0], context = _ref[1], once = _ref[2], priority = _ref[3];
          isAsync = Function.prototype.toString.call(listener).indexOf('callback)') !== -1;
          if (isAsync) {
            return listener.apply(context, args.concat(function() {
              if (once) {
                _this.remove(listener, context);
              }
              return next();
            }));
          } else {
            listener.apply(context, args);
            if (once) {
              _this.remove(listener, context);
            }
            return next();
          }
        }
      };
      return next();
    };

    return Signal;

  })();

  module.exports = Signal;

}).call(this);
