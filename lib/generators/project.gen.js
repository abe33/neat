// Generated by CoffeeScript 1.3.3
(function() {
  var Neat, basename, describe, ensureSync, error, exists, extname, hashArguments, missing, namespace, neatBroken, project, puts, render, resolve, touchSync, usages, warn, _ref, _ref1, _ref2, _ref3,
    __slice = [].slice;

  _ref = require('path'), resolve = _ref.resolve, exists = _ref.existsSync, basename = _ref.basename, extname = _ref.extname;

  Neat = require('../neat');

  _ref1 = Neat.require("utils/logs"), puts = _ref1.puts, error = _ref1.error, warn = _ref1.warn, missing = _ref1.missing, neatBroken = _ref1.neatBroken;

  _ref2 = Neat.require("utils/files"), ensureSync = _ref2.ensureSync, touchSync = _ref2.touchSync;

  namespace = Neat.require("utils/exports").namespace;

  render = Neat.require("utils/templates").renderSync;

  _ref3 = Neat.require("utils/commands"), usages = _ref3.usages, describe = _ref3.describe, hashArguments = _ref3.hashArguments;

  usages('neat generate project <name> {description, author, keywords}', describe('Creates a <name> directory with the default neat project content\nDescription, author and keywords can be defined using the hash\narguments.', project = function() {
    var args, base, cakefile, callback, context, ext, generator, gitignore, name, neatfile, nemfile, npmignore, path, tplpath, _i;
    generator = arguments[0], name = arguments[1], args = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), callback = arguments[_i++];
    if (name == null) {
      return error("Missing name argument");
    }
    if (args.length === 0 && typeof callback !== 'function') {
      args.push(callback);
    }
    path = resolve('.', name);
    base = basename(__filename);
    ext = extname(__filename);
    tplpath = resolve(__dirname, "project");
    gitignore = resolve(path, ".gitignore");
    npmignore = resolve(path, ".npmignore");
    neatfile = resolve(path, ".neat");
    nemfile = resolve(path, "Nemfile");
    cakefile = resolve(path, "Cakefile");
    context = args.empty() ? {} : hashArguments(args);
    context.merge({
      name: name,
      version: Neat.meta.version
    });
    ensureSync(path);
    try {
      touchSync(gitignore, render(resolve(tplpath, ".gitignore"), context));
      touchSync(npmignore, render(resolve(tplpath, ".npmignore"), context));
      touchSync(neatfile, render(resolve(tplpath, ".neat"), context));
      touchSync(nemfile, render(resolve(tplpath, "Nemfile"), context));
      touchSync(cakefile, render(resolve(tplpath, "Cakefile"), context));
      ensureSync(resolve(path, "lib"));
      ensureSync(resolve(path, "src"));
      ensureSync(resolve(path, "src/commands"));
      ensureSync(resolve(path, "src/generators"));
      ensureSync(resolve(path, "src/tasks"));
      ensureSync(resolve(path, "src/config"));
      ensureSync(resolve(path, "src/config/environments"));
      ensureSync(resolve(path, "src/config/initializers"));
      ensureSync(resolve(path, "templates"));
      ensureSync(resolve(path, "test"));
      ensureSync(resolve(path, "test/fixtures"));
      ensureSync(resolve(path, "test/units"));
      ensureSync(resolve(path, "test/functionals"));
      ensureSync(resolve(path, "test/integrations"));
      touchSync(resolve(path, "lib/.gitkeep"));
      touchSync(resolve(path, "src/commands/.gitkeep"));
      touchSync(resolve(path, "src/generators/.gitkeep"));
      touchSync(resolve(path, "src/tasks/.gitkeep"));
      touchSync(resolve(path, "src/config/environments/.gitkeep"));
      touchSync(resolve(path, "src/config/initializers/.gitkeep"));
      touchSync(resolve(path, "templates/.gitkeep"));
      touchSync(resolve(path, "test/test_helper.coffee"), render(resolve(tplpath, "test/test_helper"), context));
      touchSync(resolve(path, "test/fixtures/.gitkeep"));
      touchSync(resolve(path, "test/units/.gitkeep"));
      touchSync(resolve(path, "test/functionals/.gitkeep"));
      touchSync(resolve(path, "test/integrations/.gitkeep"));
    } catch (e) {
      return error("Cannot proceed to the generation of the project\n\n" + e.stack);
    }
    return typeof callback === "function" ? callback() : void 0;
  }));

  module.exports = {
    project: project
  };

}).call(this);
