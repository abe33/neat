// Generated by CoffeeScript 1.3.3
(function() {
  var NEAT_ROOT, Neat, cup, error, exists, findSync, fs, isNeatRootSync, logger, missing, neatBroken, neatRootSync, pr, puts, resolve, warn, _ref, _ref1, _ref2,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  pr = require('commander');

  _ref = require('path'), resolve = _ref.resolve, exists = _ref.existsSync;

  NEAT_ROOT = resolve(__dirname, '..');

  _ref1 = require("./utils/logs"), logger = _ref1.logger, puts = _ref1.puts, warn = _ref1.warn, error = _ref1.error, missing = _ref1.missing, neatBroken = _ref1.neatBroken;

  _ref2 = require("./utils/files"), findSync = _ref2.findSync, neatRootSync = _ref2.neatRootSync, isNeatRootSync = _ref2.isNeatRootSync;

  cup = require("./utils/cup");

  Neat = (function() {

    function Neat(root) {
      this.root = this.ROOT = root;
      this.neatRoot = this.NEAT_ROOT = NEAT_ROOT;
      this.envPath = this.ENV_PATH = 'lib/config/environments';
      this.initPath = this.INIT_PATH = 'lib/config/initializers';
      this.paths = this.PATHS = [this.neatRoot];
      this.env = this.ENV = null;
      this.meta = this.META = this.loadMeta();
      if (this.root != null) {
        this.discoverUserPaths();
      }
    }

    Neat.prototype.initEnvironment = function() {
      return this.setEnvironment(process.env['NEAT_ENV'] || 'default');
    };

    Neat.prototype.initLogging = function() {
      return logger.add(this.env.engines.logging[this.env.defaultLoggingEngine]);
    };

    Neat.prototype.setEnvironment = function(env) {
      var configurator, configurators, envObject, f, files, initialize, initializer, initializers, paths, setup, _i, _j, _k, _len, _len1, _len2,
        _this = this;
      envObject = {
        root: this.root,
        neatRoot: this.neatRoot,
        paths: this.paths,
        initPath: this.initPath,
        envPath: this.envPath,
        ROOT: this.ROOT,
        NEAT_ROOT: this.NEAT_ROOT,
        PATHS: this.PATHS,
        INIT_PATH: this.INIT_PATH,
        ENV_PATH: this.ENV_PATH,
        verbose: false
      };
      paths = this.paths.map(function(p) {
        return "" + p + "/" + _this.envPath;
      });
      configurators = findSync(/^default$/, 'js', paths);
      if (!((configurators != null) && configurators.length !== 0)) {
        return error("" + (missing('config/environments/default.js')) + "\n\n" + neatBroken);
      }
      files = findSync(RegExp("^" + env + "$"), "js", paths);
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        f = files[_i];
        if (__indexOf.call(configurators, f) < 0) {
          configurators.push(f);
        }
      }
      for (_j = 0, _len1 = configurators.length; _j < _len1; _j++) {
        configurator = configurators[_j];
        puts("Running " + configurator);
        try {
          setup = require(configurator);
          if (typeof setup === "function") {
            setup(envObject);
          }
        } catch (e) {
          error("" + 'Something went wrong with a configurator!!!'.red + "\n\n" + e.stack);
        }
      }
      initializers = findSync('js', this.paths.map(function(o) {
        return "" + o + "/" + _this.initPath;
      }));
      for (_k = 0, _len2 = initializers.length; _k < _len2; _k++) {
        initializer = initializers[_k];
        try {
          initialize = require(initializer);
          if (typeof initialize === "function") {
            initialize(envObject);
          }
        } catch (e) {
          error("" + 'Something went wrong with an initializer!!!'.red + "\n\n" + e.stack);
        }
      }
      return this.ENV = this.env = envObject;
    };

    Neat.prototype.discoverUserPaths = function() {
      var m, modules, modulesDir, _i, _len, _ref3;
      modulesDir = resolve(this.root, 'node_modules');
      if (exists(modulesDir)) {
        modules = fs.readdirSync(modulesDir);
        modules = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = modules.length; _i < _len; _i++) {
            m = modules[_i];
            if (m !== 'neat') {
              _results.push(resolve(modulesDir, m));
            }
          }
          return _results;
        })();
        for (_i = 0, _len = modules.length; _i < _len; _i++) {
          m = modules[_i];
          if (isNeatRootSync(m)) {
            this.paths.push(m);
          }
        }
      } else {
        warn('No node modules found, run neat install.');
      }
      if (_ref3 = this.root, __indexOf.call(this.paths, _ref3) < 0) {
        return this.paths.push(this.root);
      }
    };

    Neat.prototype.loadMeta = function() {
      var meta, neatFile, neatFilePath;
      neatFilePath = "" + this.neatRoot + "/.neat";
      try {
        neatFile = fs.readFileSync(neatFilePath);
      } catch (e) {
        return error("" + (missing(neatFilePath)) + "\n\n" + neatBroken);
      }
      meta = cup.read(neatFile.toString());
      return meta || error("Invalid .neat file at:\n" + neatFilePath.red + "\n\n" + neatBroken);
    };

    return Neat;

  })();

  module.exports = new Neat(neatRootSync());

}).call(this);
