// Generated by CoffeeScript 1.3.3
(function() {
  var DoccoFile, Neat, Processor, aliases, basename, cmdgen, desc, describe, documentation, ensureSync, environment, error, existsSync, extname, fs, green, index, info, missing, name, namespace, parallel, relative, render, resolve, stylesheet, warn, _ref, _ref1, _ref2;

  fs = require('fs');

  _ref = require('path'), resolve = _ref.resolve, existsSync = _ref.existsSync, basename = _ref.basename, extname = _ref.extname, relative = _ref.relative;

  Neat = require('../../neat');

  _ref1 = Neat.require('utils/logs'), error = _ref1.error, info = _ref1.info, warn = _ref1.warn, missing = _ref1.missing, green = _ref1.green;

  _ref2 = Neat.require('utils/commands'), aliases = _ref2.aliases, describe = _ref2.describe, environment = _ref2.environment;

  ensureSync = Neat.require('utils/files').ensureSync;

  render = Neat.require('utils/templates').render;

  namespace = Neat.require('utils/exports').namespace;

  parallel = Neat.require('async').parallel;

  DoccoFile = require('./docco_file');

  Processor = require('./docco_file_processor');

  cmdgen = function(name, desc, fn) {
    return function(pr) {
      var f;
      if (pr == null) {
        return error("No program provided to " + name);
      }
      return aliases(name, describe(desc, environment('production', f = function(callback) {
        if (Neat.root == null) {
          return error("Can't run neat " + name + " outside of a Neat project.");
        }
        ensureSync(resolve(Neat.root, 'docs'));
        return fn(pr, callback);
      })));
    };
  };

  name = 'docco:stylesheet';

  desc = 'Generates the documentation stylesheet';

  stylesheet = cmdgen(name, desc, function(pr, callback) {
    return render(__dirname, function(err, css) {
      if (err != null) {
        throw err;
      }
      return fs.writeFile("" + Neat.root + "/docs/docco.css", css, function(err) {
        if (err != null) {
          throw err;
        }
        info(green('Stylesheet successfully generated'));
        return typeof callback === "function" ? callback() : void 0;
      });
    });
  });

  name = 'docco:documentation';

  desc = 'Generates the documentation throug docco';

  documentation = cmdgen(name, desc, function(pr, callback) {
    var dirname, files, headerTplPath, navTplPath, pageTplPath, path, paths;
    paths = Neat.env.docco.paths.sources.concat();
    if (!(paths != null) || paths.empty()) {
      return warn('No paths specified for documentation generation.');
    }
    dirname = __dirname.replace('.cmd', '');
    navTplPath = resolve(dirname, '_navigation');
    headerTplPath = resolve(dirname, '_header');
    pageTplPath = resolve(dirname, '_page');
    files = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        path = paths[_i];
        _results.push(new DoccoFile(path));
      }
      return _results;
    })();
    return render(navTplPath, {
      files: files
    }, function(err, nav) {
      if (err != null) {
        throw err;
      }
      return render(headerTplPath, {
        files: files
      }, function(err, header) {
        var file, processors, _i, _len;
        if (err != null) {
          throw err;
        }
        processors = [];
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          processors.push(Processor.asCommand(file, header, nav));
        }
        return parallel(processors, function() {
          info(green('Documentation successfully generated'));
          return typeof callback === "function" ? callback() : void 0;
        });
      });
    });
  });

  index = cmdgen('docco', 'Generates the documentation for a Neat project through docco', function(pr, cb) {
    return stylesheet(pr)(function() {
      return documentation(pr)(cb);
    });
  });

  module.exports = namespace('docco', {
    index: index,
    stylesheet: stylesheet,
    documentation: documentation
  });

}).call(this);
