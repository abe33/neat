// Generated by CoffeeScript 1.3.3
(function() {
  var DoccoFile, DoccoFileProcessor, Neat, REQUIRE_RE, aliases, basename, describe, docco, ensureSync, error, existsSync, extname, fs, missing, neatBroken, puts, relative, render, resolve, utils, warn, _ref, _ref1, _ref2;

  fs = require('fs');

  _ref = require('path'), resolve = _ref.resolve, existsSync = _ref.existsSync, basename = _ref.basename, extname = _ref.extname, relative = _ref.relative;

  Neat = require('../../neat').Neat;

  utils = resolve(Neat.neatRoot, 'lib/utils');

  _ref1 = require(resolve(utils, 'logs')), puts = _ref1.puts, error = _ref1.error, warn = _ref1.warn, missing = _ref1.missing, neatBroken = _ref1.neatBroken;

  _ref2 = require(resolve(utils, 'commands')), aliases = _ref2.aliases, describe = _ref2.describe;

  ensureSync = require(resolve(utils, 'files')).ensureSync;

  render = require(resolve(utils, 'templates')).render;

  DoccoFile = require('./docco_file');

  DoccoFileProcessor = require('./docco_file_processor');

  REQUIRE_RE = /^\s*\#=\s*require\s+([^\s]+)/gm;

  docco = function(pr) {
    var f;
    if (pr == null) {
      return puts(error('No program provided to docco'));
    }
    return aliases('docco', describe('Generates the documentation for a Neat project through docco', f = function(callback) {
      var dirname, files, headerTplPath, highlight, navTplPath, pageTplPath, parse, path, paths, _ref3;
      if (Neat.root == null) {
        return puts(error("Can't run neat docco outside of a Neat project."));
      }
      try {
        _ref3 = require('docco'), parse = _ref3.parse, highlight = _ref3.highlight;
      } catch (e) {
        return puts(error("" + 'Can\'t find the docco module.'.red + "\n\nRun cake install to install the dependencies"));
      }
      paths = Neat.env.docco.paths.sources.concat();
      if (!(paths != null) || paths.empty()) {
        return puts(warn('No paths specified for documentation generation.'));
      }
      dirname = __dirname.replace('.cmd', '');
      navTplPath = resolve(dirname, '_navigation');
      headerTplPath = resolve(dirname, '_header');
      pageTplPath = resolve(dirname, '_page');
      files = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = paths.length; _i < _len; _i++) {
          path = paths[_i];
          _results.push(new DoccoFile(path));
        }
        return _results;
      })();
      ensureSync(resolve(Neat.root, 'docs'));
      return render(navTplPath, {
        files: files
      }, function(err, nav) {
        if (err != null) {
          throw err;
        }
        return render(headerTplPath, {
          files: files
        }, function(err, header) {
          var generateDocumentation, highlightFile, nextFile;
          if (err != null) {
            throw err;
          }
          highlightFile = function(path, sections, callback) {
            return highlight(path, sections, function() {
              return typeof callback === "function" ? callback() : void 0;
            });
          };
          generateDocumentation = function(file, sources, callback) {
            return fs.readFile(file.path, function(err, code) {
              var sections;
              if (err != null) {
                throw err;
              }
              sections = parse(file.path, code.toString());
              return highlightFile(file.path, sections, function() {
                var context;
                context = {
                  sections: sections,
                  header: header,
                  nav: nav
                };
                return render(pageTplPath, context, function(err, page) {
                  if (err != null) {
                    throw err;
                  }
                  return fs.writeFile(file.outputPath, page, function(err) {
                    if (err != null) {
                      throw err;
                    }
                    console.log(("source for " + file.relativePath + "                               documentation processed").squeeze());
                    return typeof callback === "function" ? callback() : void 0;
                  });
                });
              });
            });
          };
          nextFile = function() {
            if (files.length) {
              return generateDocumentation(files.shift(), Neat.env.docco.paths.sources, nextFile);
            } else {
              console.log('Documentation successfully generated'.green);
              return typeof callback === "function" ? callback() : void 0;
            }
          };
          return nextFile();
        });
      });
    }));
  };

  module.exports = {
    docco: docco
  };

}).call(this);
