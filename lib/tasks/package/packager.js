// Generated by CoffeeScript 1.4.0
(function() {
  var Neat, Packager, chain, compile, ensure, readFiles, writeFile, _, _ref;

  Neat = require('../../neat');

  writeFile = require('fs').writeFile;

  compile = require('coffee-script').compile;

  chain = Neat.require('async').chain;

  _ref = Neat.require('utils/files'), readFiles = _ref.readFiles, ensure = _ref.ensure;

  _ = Neat.i18n.getHelper();

  Packager = (function() {

    Packager.asCommand = function(conf) {
      return function(callback) {
        return new Packager(conf).process(callback);
      };
    };

    function Packager(conf) {
      var k, malformedConf, operator, preventMissingConf, _i, _len, _ref1,
        _this = this;
      this.conf = conf;
      malformedConf = function(key, type) {
        throw new Error(_('neat.tasks.package.invalid_configuration', {
          key: key,
          type: type
        }));
      };
      preventMissingConf = function(key) {
        if (_this.conf[key] == null) {
          throw new Error(_('neat.tasks.package.missing_configuration', {
            key: key
          }));
        }
      };
      preventMissingConf('includes');
      preventMissingConf('operators');
      if (!Array.isArray(this.conf['includes'])) {
        malformedConf('includes', 'Array');
      }
      if (!Array.isArray(this.conf['operators'])) {
        malformedConf('operators', 'Array');
      }
      this.conf.merge(Neat.config.tasks["package"]);
      this.operators = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.conf.operators;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          k = _ref1[_i];
          _results.push(this.conf.operatorsMap[k]);
        }
        return _results;
      }).call(this);
      _ref1 = this.operators;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        operator = _ref1[_i];
        if (typeof operator.validate === "function") {
          operator.validate(this.conf);
        }
      }
    }

    Packager.prototype.process = function(callback) {
      var _this = this;
      this.conf.includes = this.conf.includes.map(function(p) {
        return "" + Neat.root + "/" + p + ".coffee";
      });
      return readFiles(this.conf.includes, function(err, res) {
        return chain.call(null, _this.operators, res, _this.conf, function(buffer) {
          _this.result = buffer;
          return typeof callback === "function" ? callback() : void 0;
        });
      });
    };

    return Packager;

  })();

  module.exports = Packager;

}).call(this);
