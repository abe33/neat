// Generated by CoffeeScript 1.3.3
(function() {
  var LITERAL_RE, NAME_RE, Neat, PACKAGE_RE, Packager, chain, compile, ensure, readFiles, writeFile, _ref;

  Neat = require('../../neat');

  writeFile = require('fs').writeFile;

  compile = require('coffee-script').compile;

  chain = Neat.require('async').chain;

  _ref = Neat.require('utils/files'), readFiles = _ref.readFiles, ensure = _ref.ensure;

  LITERAL_RE = '[a-zA-Z_$][a-zA-Z0-9_$]*';

  PACKAGE_RE = function() {
    return RegExp("^(" + LITERAL_RE + ")(\\." + LITERAL_RE + ")*$");
  };

  NAME_RE = function() {
    return /^[a-zA-Z_$][a-zA-Z0-9_$-.]*$/;
  };

  Packager = (function() {

    Packager.asCommand = function(conf) {
      return function(callback) {
        return new Packager(conf).process(callback);
      };
    };

    function Packager(conf) {
      var k, malformedConf, preventMissingConf, validate,
        _this = this;
      this.conf = conf;
      validate = function(key, re, expect) {
        if (!re.test(_this.conf[key])) {
          throw new Error("Malformed string for " + key + ", expect " + expect);
        }
      };
      malformedConf = function(key, type) {
        return new Error("Malformed configuration for " + key + ", expect " + type);
      };
      preventMissingConf = function(key) {
        if (_this.conf[key] == null) {
          throw new Error("Missing configuration " + key);
        }
      };
      preventMissingConf('name');
      preventMissingConf('package');
      preventMissingConf('includes');
      preventMissingConf('operators');
      if (!Array.isArray(this.conf['includes'])) {
        malformedConf('includes', 'Array');
      }
      if (!Array.isArray(this.conf['operators'])) {
        malformedConf('operators', 'Array');
      }
      validate('name', NAME_RE(), 'a file name such foo_bar of foo-bar');
      validate('package', PACKAGE_RE(), 'a path such com.exemple.foo');
      this.conf.merge(Neat.config.tasks["package"]);
      this.operators = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.conf.operators;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          k = _ref1[_i];
          _results.push(this.conf.operatorsMap[k]);
        }
        return _results;
      }).call(this);
    }

    Packager.prototype.process = function(callback) {
      var files,
        _this = this;
      files = this.conf.includes.map(function(p) {
        return "" + Neat.root + "/" + p + ".coffee";
      });
      return readFiles(files, function(err, res) {
        return chain.call(null, _this.operators, res, _this.conf, function(buffer) {
          _this.result = buffer;
          return typeof callback === "function" ? callback() : void 0;
        });
      });
    };

    return Packager;

  })();

  module.exports = Packager;

}).call(this);
