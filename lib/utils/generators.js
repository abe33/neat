// Generated by CoffeeScript 1.3.3
(function() {
  var Neat, describe, ensurePathSync, error, fs, hashArguments, info, missing, namedEntity, notOutsideNeat, render, resolve, usages, utils, _ref, _ref1,
    __slice = [].slice;

  fs = require('fs');

  resolve = require('path').resolve;

  Neat = require('../neat');

  utils = resolve(Neat.neatRoot, "lib/utils");

  ensurePathSync = require(resolve(utils, "files")).ensurePathSync;

  _ref = require(resolve(utils, "commands")), describe = _ref.describe, usages = _ref.usages, hashArguments = _ref.hashArguments;

  render = require(resolve(utils, "templates")).render;

  _ref1 = require(resolve(utils, "logs")), error = _ref1.error, info = _ref1.info, missing = _ref1.missing, notOutsideNeat = _ref1.notOutsideNeat;

  namedEntity = function(src, dir, ext, requireNeat) {
    if (requireNeat == null) {
      requireNeat = true;
    }
    return function() {
      var a, args, cb, context, generator, name, _i;
      generator = arguments[0], name = arguments[1], args = 4 <= arguments.length ? __slice.call(arguments, 2, _i = arguments.length - 1) : (_i = 2, []), cb = arguments[_i++];
      if (requireNeat) {
        if (Neat.root == null) {
          return notOutsideNeat(process.argv.join(" "));
        }
      }
      if (name == null) {
        return error("Missing name argument");
      }
      a = name.split('/');
      name = a.pop();
      context = args.empty() ? {} : hashArguments(args);
      context.merge({
        name: name
      });
      return render(src, context, function(err, data) {
        var path;
        if (err != null) {
          return error("" + (missing("Template for " + src)) + "\n\n" + err.stack);
        }
        dir = resolve(Neat.root, "" + dir + "/" + (a.join('/')));
        ensurePathSync(dir);
        path = resolve(dir, "" + name + "." + ext);
        return fs.writeFile(path, data, function(err) {
          if (err) {
            return error("" + ("Can't write " + path).red + "\n\n" + err.stack) && (typeof cb === "function" ? cb() : void 0);
          }
          info(("" + dir + "/" + name + "." + ext + " generated").green);
          return typeof cb === "function" ? cb() : void 0;
        });
      });
    };
  };

  module.exports = {
    namedEntity: namedEntity
  };

}).call(this);
