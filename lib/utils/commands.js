// Generated by CoffeeScript 1.3.3
(function() {
  var Neat, aliases, asyncErrorTrap, decorate, describe, environment, error, help, neatTask, print, puts, resolve, run, spawn, usages, _ref,
    __slice = [].slice;

  spawn = require('child_process').spawn;

  resolve = require('path').resolve;

  _ref = require('./logs'), puts = _ref.puts, print = _ref.print, error = _ref.error;

  Neat = require('../neat');

  decorate = function(target, property, value) {
    target[property] = value;
    return target;
  };

  usages = function() {
    var target, usages, _i;
    usages = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), target = arguments[_i++];
    return decorate(target, 'usages', usages);
  };

  aliases = function() {
    var aliases, target, _i;
    aliases = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), target = arguments[_i++];
    return decorate(target, 'aliases', aliases);
  };

  describe = function(description, target) {
    return decorate(target, 'description', description);
  };

  help = function(help, target) {
    return decorate(target, 'help', help);
  };

  environment = function(env, target) {
    return decorate(target, 'environment', env);
  };

  run = function(command, options, callback) {
    var exe;
    exe = spawn(command, options);
    exe.stdout.on('data', function(data) {
      return print(data.toString());
    });
    exe.stderr.on('data', function(data) {
      return print(data.toString());
    });
    return exe.on('exit', function(status) {
      return typeof callback === "function" ? callback(status) : void 0;
    });
  };

  neatTask = function(options) {
    var action, description, name, taskAction;
    name = options.name, action = options.action, description = options.description, environment = options.environment;
    if (name == null) {
      throw new Error("Tasks must have a name");
    }
    if (action == null) {
      throw new Error("Tasks must have an action");
    }
    taskAction = function() {
      action = options.action, environment = options.environment;
      if (environment != null) {
        Neat.defaultEnvironment = environment;
      }
      Neat.initEnvironment();
      return action();
    };
    task(name, description, taskAction);
    return action;
  };

  asyncErrorTrap = function(callback) {
    return function() {
      var args, err;
      err = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (err != null) {
        return error("" + err.stack + "\n");
      }
      return callback != null ? callback.apply(null, args) : void 0;
    };
  };

  module.exports = {
    aliases: aliases,
    asyncErrorTrap: asyncErrorTrap,
    decorate: decorate,
    describe: describe,
    environment: environment,
    help: help,
    neatTask: neatTask,
    run: run,
    usages: usages
  };

}).call(this);
