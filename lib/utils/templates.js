// Generated by CoffeeScript 1.3.3
(function() {
  var Neat, error, extname, findSiblingFile, fs, missing, neatBroken, puts, render, renderSync, resolve, warn, _ref, _ref1;

  fs = require('fs');

  _ref = require('path'), resolve = _ref.resolve, extname = _ref.extname;

  Neat = require('../neat');

  findSiblingFile = require("../utils/files").findSiblingFile;

  _ref1 = require("../utils/logs"), puts = _ref1.puts, error = _ref1.error, warn = _ref1.warn, missing = _ref1.missing, neatBroken = _ref1.neatBroken;

  render = function(file, context, callback) {
    var a, engines, ext, k, tplfile, v, _ref2;
    a = [];
    tplfile = findSiblingFile(file, Neat.paths, "templates", "*", a);
    if (typeof context === 'function') {
      _ref2 = [{}, context], context = _ref2[0], callback = _ref2[1];
    }
    if (tplfile == null) {
      if (typeof callback === "function") {
        callback(new Error("" + (missing(tplfile)) + "\n\nExplored paths:\n" + (a.join("\n"))));
      }
    }
    puts("template found: " + tplfile);
    ext = extname(tplfile).slice(1);
    engines = Neat.env.engines.templates;
    for (k in engines) {
      v = engines[k];
      if (ext === k) {
        render = v.render;
      }
    }
    if (render == null) {
      if (typeof callback === "function") {
        callback(new Error("" + (missing("" + ext + " template backend"))));
      }
    }
    puts("engine found for " + ext);
    return fs.readFile(tplfile, function(err, tpl) {
      if (err) {
        if (typeof callback === "function") {
          callback(new Error(error("Can't access " + tplfile + "\n\n" + err.stack)));
        }
      }
      return typeof callback === "function" ? callback(null, render(tpl.toString(), context)) : void 0;
    });
  };

  renderSync = function(file, context) {
    var a, engines, ext, k, tpl, tplfile, v;
    a = [];
    tplfile = findSiblingFile(file, Neat.paths, "templates", "*", a);
    if (tplfile == null) {
      throw new Error("" + (missing(tplfile)) + "\n\nExplored paths:\n" + (a.join("\n")));
    }
    puts("template found: " + tplfile.green);
    ext = extname(tplfile).slice(1);
    engines = Neat.env.engines.templates;
    for (k in engines) {
      v = engines[k];
      if (ext === k) {
        render = v.render;
      }
    }
    if (render == null) {
      throw new Error("" + (missing("" + ext + " template backend")));
    }
    puts("engine found for " + ext.cyan);
    try {
      tpl = fs.readFileSync(tplfile);
    } catch (e) {
      e.message = error("Can't access " + tplfile + "\n" + e.message);
      throw e;
    }
    return render(tpl.toString(), context);
  };

  module.exports = {
    render: render,
    renderSync: renderSync
  };

}).call(this);
