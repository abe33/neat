// Generated by CoffeeScript 1.3.3
(function() {
  var Neat, error, extname, findSiblingFile, findSiblingFileSync, fs, missing, neatBroken, puts, render, renderSync, resolve, warn, _ref, _ref1, _ref2;

  fs = require('fs');

  _ref = require('path'), resolve = _ref.resolve, extname = _ref.extname;

  Neat = require('../neat');

  _ref1 = require("../utils/files"), findSiblingFile = _ref1.findSiblingFile, findSiblingFileSync = _ref1.findSiblingFileSync;

  _ref2 = require("../utils/logs"), puts = _ref2.puts, error = _ref2.error, warn = _ref2.warn, missing = _ref2.missing, neatBroken = _ref2.neatBroken;

  render = function(file, context, callback) {
    var a;
    a = [];
    return findSiblingFile(file, Neat.paths, "templates", function(e, tplfile, a) {
      var engines, ext, k, v, _ref3;
      if (typeof context === 'function') {
        _ref3 = [{}, context], context = _ref3[0], callback = _ref3[1];
      }
      if (e != null) {
        return typeof callback === "function" ? callback(e) : void 0;
      }
      if (tplfile == null) {
        return typeof callback === "function" ? callback(new Error("" + (missing(tplfile)) + "\n\nExplored paths:\n" + (a.join("\n")))) : void 0;
      }
      puts("template found: " + tplfile.yellow);
      ext = extname(tplfile).slice(1);
      engines = Neat.env.engines.templates;
      for (k in engines) {
        v = engines[k];
        if (ext === k) {
          render = v.render;
        }
      }
      if (render == null) {
        if (typeof callback === "function") {
          callback(new Error("" + (missing("" + ext + " template backend"))));
        }
      }
      puts("engine found for " + ext.cyan);
      return fs.readFile(tplfile, function(err, tpl) {
        if (err) {
          if (typeof callback === "function") {
            callback(new Error(error("Can't access " + tplfile.red + "\n\n" + err.stack)));
          }
        }
        return typeof callback === "function" ? callback(null, render(tpl.toString(), context)) : void 0;
      });
    });
  };

  renderSync = function(file, context) {
    var a, engines, ext, k, tpl, tplfile, v;
    a = [];
    tplfile = findSiblingFileSync(file, Neat.paths, "templates", "*", a);
    if (tplfile == null) {
      throw new Error("" + (missing(tplfile)) + "\n\nExplored paths:\n" + (a.join("\n")));
    }
    puts("template found: " + tplfile.yellow);
    ext = extname(tplfile).slice(1);
    engines = Neat.env.engines.templates;
    for (k in engines) {
      v = engines[k];
      if (ext === k) {
        render = v.render;
      }
    }
    if (render == null) {
      throw new Error("" + (missing("" + ext + " template backend")));
    }
    puts("engine found for " + ext.cyan);
    try {
      tpl = fs.readFileSync(tplfile);
    } catch (e) {
      e.message = error("Can't access " + tplfile.red + "\n" + e.message);
      throw e;
    }
    return render(tpl.toString(), context);
  };

  module.exports = {
    render: render,
    renderSync: renderSync
  };

}).call(this);
