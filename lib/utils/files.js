// Generated by CoffeeScript 1.3.3
(function() {
  var basename, dirWithIndexSync, ensurePathSync, ensureSync, error, exists, existsSync, findBaseSync, findOneSync, findSiblingFile, findSync, fs, isNeatRootSync, missing, neatRootSync, noExtension, puts, relative, resolve, touchSync, warn, _ref, _ref1,
    __slice = [].slice;

  fs = require('fs');

  _ref = require('path'), resolve = _ref.resolve, existsSync = _ref.existsSync, exists = _ref.exists, basename = _ref.basename, relative = _ref.relative;

  _ref1 = require('./logs'), puts = _ref1.puts, error = _ref1.error, warn = _ref1.warn, missing = _ref1.missing;

  noExtension = function(o) {
    return o.replace(/([^/.]+)\..+$/, "$1");
  };

  ensureSync = function(dir) {
    if (!existsSync(dir)) {
      return fs.mkdirSync(dir);
    }
  };

  ensurePathSync = function(path) {
    var d, dirs, p, _results;
    dirs = path.split('/');
    dirs.shift();
    p = '/';
    _results = [];
    while (dirs.length > 0) {
      d = dirs.shift();
      p = resolve(p, d);
      if (!existsSync(p)) {
        _results.push(fs.mkdirSync(p));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  touchSync = function(path, content) {
    if (content == null) {
      content = '';
    }
    if (!existsSync(path)) {
      return fs.writeFileSync(path, content);
    }
  };

  findBaseSync = function(dir, base) {
    var content, f, _i, _len, _results;
    if (!existsSync(dir)) {
      return;
    }
    content = fs.readdirSync(dir);
    _results = [];
    for (_i = 0, _len = content.length; _i < _len; _i++) {
      f = content[_i];
      if (f.match(RegExp("^" + base + "(\\.|$)"))) {
        _results.push(resolve(dir, f));
      }
    }
    return _results;
  };

  isNeatRootSync = function(dir) {
    return existsSync(resolve(dir, ".neat"));
  };

  neatRootSync = function(path) {
    var parentPath;
    if (path == null) {
      path = ".";
    }
    path = resolve(path);
    if (isNeatRootSync(path)) {
      return path;
    } else {
      parentPath = resolve(path, "..");
      if (parentPath !== path) {
        return neatRootSync(parentPath);
      }
    }
  };

  dirWithIndexSync = function(dir, ext) {
    var index, _ref2;
    if (ext == null) {
      ext = null;
    }
    if (!existsSync(dir)) {
      return;
    }
    index = ext != null ? "index." + ext : "index";
    return (_ref2 = findBaseSync(dir, index)) != null ? _ref2[0] : void 0;
  };

  findSiblingFile = function() {
    var base, basepath, dif, dir, ext, exts, newPath, p, path, pathRoot, paths, ps, root, roots, start, stats, _i, _j, _k, _l, _len, _len1, _len2, _ref2;
    path = arguments[0], roots = arguments[1], dir = arguments[2], exts = 5 <= arguments.length ? __slice.call(arguments, 3, _i = arguments.length - 1) : (_i = 3, []), paths = arguments[_i++];
    pathRoot = neatRootSync(path);
    if (pathRoot == null) {
      return;
    }
    if (typeof paths === "string") {
      _ref2 = [exts.concat(paths), null], exts = _ref2[0], paths = _ref2[1];
    }
    start = noExtension(path);
    base = basename(start);
    dif = relative(pathRoot, resolve(start, ".."));
    newPath = dif.replace(/^[^\/]+/, dir);
    if (exts == null) {
      exts = "*";
    }
    if (typeof exts !== "object") {
      exts = [exts];
    }
    p = void 0;
    roots = roots.concat();
    roots.reverse();
    for (_j = 0, _len = roots.length; _j < _len; _j++) {
      root = roots[_j];
      basepath = resolve(root, newPath);
      for (_k = 0, _len1 = exts.length; _k < _len1; _k++) {
        ext = exts[_k];
        if (paths != null) {
          paths.push(resolve(basepath, ext === "*" ? base : "" + base + "." + ext));
        }
        ps = findBaseSync(basepath, base);
        if (ps != null) {
          ps.sort();
          for (_l = 0, _len2 = ps.length; _l < _len2; _l++) {
            p = ps[_l];
            stats = fs.lstatSync(p);
            if (stats.isDirectory()) {
              if (paths != null) {
                paths.push(resolve(p, ext === "*" ? "index" : "index." + ext));
              }
              p = dirWithIndexSync(p);
              if (ext !== "*") {
                if (p.match(RegExp("\\." + ext + "$"))) {
                  return p;
                } else {
                  p = void 0;
                }
              } else {
                return p;
              }
            } else if (ext !== "*") {
              if (p.match(RegExp("\\." + ext + "$"))) {
                return p;
              } else {
                p = void 0;
              }
            } else {
              return p;
            }
          }
        }
      }
    }
    return void 0;
  };

  findSync = function(pattern, ext, paths) {
    var founds, out, path, _i, _len, _ref2;
    if (typeof pattern === "string") {
      _ref2 = [null, pattern, ext], pattern = _ref2[0], ext = _ref2[1], paths = _ref2[2];
    }
    if (typeof paths === "string") {
      return findOneSync(pattern, ext, paths);
    } else {
      out = [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        path = paths[_i];
        founds = findOneSync(pattern, ext, path);
        if (founds != null) {
          out = out.concat(founds);
        }
      }
      return out;
    }
  };

  findOneSync = function(pattern, ext, path) {
    var content, extRe, found, index, out, p, stats, _i, _len, _path;
    if (!existsSync(path)) {
      return;
    }
    out = [];
    extRe = RegExp("\\." + ext + "$");
    content = fs.readdirSync(path);
    for (_i = 0, _len = content.length; _i < _len; _i++) {
      p = content[_i];
      found = null;
      _path = resolve(path, p);
      stats = fs.lstatSync(_path);
      if (stats.isDirectory()) {
        found = findSync(pattern, ext, _path);
        index = resolve(_path, "index." + ext);
        if ((pattern != null) && p.match(pattern) && existsSync(index)) {
          if (found == null) {
            found = [];
          }
          found.push(index);
        }
      } else if (p.match(extRe)) {
        if (pattern != null) {
          if (p.replace(extRe, '').match(pattern)) {
            found = _path;
          }
        } else {
          found = _path;
        }
      }
      if (found != null) {
        out = out.concat(found);
      }
    }
    if (out.length > 0) {
      return out;
    } else {
      return null;
    }
  };

  module.exports = {
    dirWithIndexSync: dirWithIndexSync,
    ensureSync: ensureSync,
    ensurePathSync: ensurePathSync,
    findSync: findSync,
    findBaseSync: findBaseSync,
    findSiblingFile: findSiblingFile,
    isNeatRootSync: isNeatRootSync,
    neatRootSync: neatRootSync,
    noExtension: noExtension,
    touchSync: touchSync
  };

}).call(this);
