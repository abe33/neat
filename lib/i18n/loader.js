// Generated by CoffeeScript 1.3.3
(function() {
  var Loader, Neat, asyncErrorTrap, find, readFiles, yaml, _ref;

  yaml = require('js-yaml');

  Neat = require('../neat');

  _ref = Neat.require('utils/files'), find = _ref.find, readFiles = _ref.readFiles;

  asyncErrorTrap = Neat.require('utils/commands').asyncErrorTrap;

  Loader = (function() {

    function Loader(paths) {
      this.paths = paths;
    }

    Loader.prototype.load = function(callback) {
      var _this = this;
      this.locales = {};
      return find('yml', this.paths, asyncErrorTrap(callback, function(files) {
        if (typeof err !== "undefined" && err !== null) {
          throw err;
        }
        return readFiles(files, asyncErrorTrap(callback, function(docs) {
          var content, path;
          if (typeof err !== "undefined" && err !== null) {
            throw err;
          }
          for (path in docs) {
            content = docs[path];
            _this.deepMerge(_this.locales, yaml.load(content));
          }
          _this.languages = _this.locales.sortedKeys();
          return typeof callback === "function" ? callback() : void 0;
        }));
      }));
    };

    Loader.prototype.deepMerge = function(target, source) {
      var k, v, _results;
      _results = [];
      for (k in source) {
        v = source[k];
        switch (typeof v) {
          case 'object':
            if (Array.isArray(v)) {
              target[k] || (target[k] = []);
              _results.push(target[k] = target[k].concat(v));
            } else {
              target[k] || (target[k] = {});
              _results.push(this.deepMerge(target[k], v));
            }
            break;
          default:
            _results.push(target[k] = v);
        }
      }
      return _results;
    };

    return Loader;

  })();

  module.exports = Loader;

}).call(this);
