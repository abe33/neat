// Generated by CoffeeScript 1.3.3
(function() {
  var NEAT_ROOT, Neat, PATHS, cup, envBase, error, exists, findSync, fs, initBase, isNeatRootSync, m, meta, missing, modules, modulesDir, neatBroken, neatFile, neatFilePath, neatRootSync, pr, puts, resolve, userDir, utils, warn, _i, _len, _ref, _ref1, _ref2,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  pr = require('commander');

  _ref = require('path'), resolve = _ref.resolve, exists = _ref.existsSync;

  NEAT_ROOT = resolve(__dirname, '..');

  PATHS = [NEAT_ROOT];

  utils = "" + NEAT_ROOT + "/lib/utils";

  _ref1 = require("" + utils + "/logs"), puts = _ref1.puts, warn = _ref1.warn, error = _ref1.error, missing = _ref1.missing, neatBroken = _ref1.neatBroken;

  _ref2 = require("" + utils + "/files"), findSync = _ref2.findSync, neatRootSync = _ref2.neatRootSync, isNeatRootSync = _ref2.isNeatRootSync;

  cup = require("" + utils + "/cup");

  envBase = "lib/config/environments";

  initBase = "lib/config/initializers";

  userDir = neatRootSync();

  if (userDir != null) {
    modulesDir = resolve(userDir, "node_modules");
    if (exists(modulesDir)) {
      modules = fs.readdirSync(modulesDir);
      modules = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = modules.length; _i < _len; _i++) {
          m = modules[_i];
          if (m !== "neat") {
            _results.push(resolve(modulesDir, m));
          }
        }
        return _results;
      })();
      for (_i = 0, _len = modules.length; _i < _len; _i++) {
        m = modules[_i];
        if (isNeatRootSync(m)) {
          PATHS.push(m);
        }
      }
    } else {
      puts(warn("No node modules found, run neat install."));
    }
    if (__indexOf.call(PATHS, userDir) < 0) {
      PATHS.push(userDir);
    }
  }

  neatFilePath = "" + NEAT_ROOT + "/.neat";

  try {
    neatFile = fs.readFileSync(neatFilePath);
  } catch (e) {
    return puts("" + (missing(neatFilePath)) + "\n\n" + neatBroken);
  }

  meta = cup.read(neatFile.toString());

  if (meta == null) {
    return puts(error("Invalid .neat file at:\n" + neatFilePath.red + "\n\n" + neatBroken));
  }

  Neat = {
    meta: meta,
    env: {},
    neatRoot: NEAT_ROOT,
    paths: PATHS,
    root: userDir,
    ENV: {},
    NEAT_ROOT: NEAT_ROOT,
    PATHS: PATHS,
    ROOT: userDir,
    setEnvironment: function(env) {
      var configurator, configurators, envObject, f, files, initialize, initializer, initializers, paths, setup, _j, _k, _l, _len1, _len2, _len3;
      envObject = {
        neatRoot: NEAT_ROOT,
        paths: PATHS,
        root: userDir,
        verbose: true,
        NEAT_ROOT: NEAT_ROOT,
        PATHS: PATHS,
        ROOT: userDir
      };
      paths = this.paths.map(function(p) {
        return "" + p + "/" + envBase;
      });
      configurators = findSync(/^default$/, "js", paths);
      if (!((configurators != null) && configurators.length !== 0)) {
        return puts(error("" + (missing('config/environments/default.js')) + "\n\n" + neatBroken));
      }
      files = findSync(RegExp("^" + env + "$"), "js", paths);
      for (_j = 0, _len1 = files.length; _j < _len1; _j++) {
        f = files[_j];
        if (__indexOf.call(configurators, f) < 0) {
          configurators.push(f);
        }
      }
      for (_k = 0, _len2 = configurators.length; _k < _len2; _k++) {
        configurator = configurators[_k];
        try {
          setup = require(configurator).setup;
          if (typeof setup === "function") {
            setup(envObject);
          }
        } catch (e) {
          puts(error('Something went wrong with a configurator!!!'.red));
          if (envObject.verbose) {
            puts(e.stack);
          }
        }
      }
      initializers = findSync('js', this.paths.map(function(o) {
        return "" + o + "/" + initBase;
      }));
      for (_l = 0, _len3 = initializers.length; _l < _len3; _l++) {
        initializer = initializers[_l];
        try {
          initialize = require(initializer).initialize;
          if (typeof initialize === "function") {
            initialize(envObject);
          }
        } catch (e) {
          puts(error('Something went wrong with an initializer!!!'.red));
          if (envObject.verbose) {
            puts(e.stack);
          }
        }
      }
      return this.ENV = this.env = envObject;
    }
  };

  Neat.setEnvironment("default");

  module.exports = {
    Neat: Neat
  };

}).call(this);
