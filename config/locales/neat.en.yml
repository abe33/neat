en:
  neat:
    errors:
      error: "#{msg}\n\n#{stack}"

      broken: Your Neat installation is probably broken.
      broken_initializer: Something went wrong with an initializer!!!
      broken_environment: Something went wrong with a configurator!!!

      missing: "#{missing} can't be found"
      missing_argument: "Missing argument #{name}"
      missing_module: "#{missing}\n\nRun cake install to install the dependencies"

      no_nemfile: No Nemfile in the current directory

      invalid_neat: "Invalid .neat file at: #{path}"
      outside_neat: "Can't run #{expression} outside of a Neat project."

      file_access: "Can't access #{file}\n\n#{stack}"
      file_write: "Can't write #{file}\n\n#{stack}"

    tasks:
      no_name: Tasks must have a name
      no_action: Tasks must have an action
      alias: "#{task} alias"

      compile:
        description: Compiles the sources
        compilation_done: Compilation done
        compilation_failed: Compilation failed

      package:
        invalid_string: "Malformed string for #{key}, expect #{expect}"
        invalid_configuration: "Malformed configuration for #{key}, expect #{type}"
        missing_configuration: "Missing configuration #{key}"
        missing_file: "Missing file #{file}"
        expected_name: a file name such foo_bar of foo-bar
        expected_package: a path such com.exemple.foo
        package_failed: "#{failed} failed, #{succeed} processed"

        process: "Package config #{file}"
        processed: "#{files} files processed"
        description: Generates packages for this projects
        packages_done: "#{packages} package(s) processed"

      bump:
        no_neat: Can't find .neat file
        version_bumped: "Version bumped to #{version}"
        description: Bump build version of the module
        minor_description: Bump minor version of the module
        major_description: Bump major version of the module

      deploy:
        description: Installs the module globally through npm
        deploy_done: Neat installed
        deploy_failed: Something went wrong during installation
        compile_failed: "Compilation have failed, please fix it before deploying the module again"

      lint:
        description: Lint the sources with coffee-lint
        lint_error: "#{file} is not ok"
        files_linted: "All files linted (#{files})"

      list:
        description: List all the tasks and provides details about them
        header:
          task: Task
          environment: Environment

      test:
        description: Run all tests
        unit_description: Run unit tests
        functional_description: Run functional tests
        integration_description: Run integration tests
        tests_done: All tests complete
        tests_failed: Some tests failed

      version:
        description: Print the project version
        message: "#{name} version: #{version}"

      watch:
        watching_singular: "Now watching directory #{dir}"
        watching_plural: "Now watching directories #{dirs}"
        description: Watches for changes in the src directory and run compile
      watch_test:
        description: Watches for changes in the src and test directories and run compilation and tests
      watch_test_unit:
        description: Watches for changes in the src and test/units directories and run compilation and unit tests
      watch_test_functional:
        description: Watches for changes in the src and test/functionals directories and run compilation and functional tests
      watch_test_integration:
        description: Watches for changes in the src and test/integrations directories and run compilation and integration tests

      github_pages:
        untracked_files: |
          Untracked files detected in this branch. The github:pages task
          will remove all the files from the repository when constructing the
          gh-pages branch, these files will then be lost when coming back in
          the current branch.
        unstaged_changes: |
          Unstaged changes detected in this branch. Please either commit
          or stash this changes before running cake github:pages again.
        description: Generates or updates the gh-pages branch of the current project
        pages_index:
          title: Pages Index

    commands:
      command: "Command '#{command}'"
      no_program: "No program provided to #{command}"
      no_commands: No commands map provided
      no_register: "Can't register command #{command}"
      invalid_arguments: "Invalid syntax: #{expression}"
      invalid_command: "#{command}\n\nA command must be function with an aliases."
      missing_command: "#{missing}\n\nTry `neat help` for a list of the available commands."

      help:
        description: "Display the help of the specified [command]"
        help_list_title: "Commands:"

      list:
        description: List all the commands and provides details about them
        headers:
          command: Command
          environment: Environment
          aliases: Aliases

      install:
        description: Installs all the dependencies listed in the `Nemfile`
        install_done: Your bundle is complete.
        install_failed: An error occured during the installation!

      generate:
        description: "Runs the specified [generator]"
        file_generated: "#{path} generated"
        help_list_title: "Generators:"
        invalid_generator: "Generators must be a function, was #{type}"
        file_exists: "File #{file} already exists"

        command:
          description: |
            Generates a command in the commands directory.
            Description, usages and environment can be defined with
            the hash arguments syntax.

        config_lint:
          description: Generates a lint.json configuration for the cake lint task
          config_generated: "#{config} generated"

        config_packager:
          description: Generates a packager config in the config/packages directory

        generator:
          name: "Generator #{generator}"
          description: Generates a generator in the generators directory

        initializer:
          description: Generates a initializer in the config/initializers directory

        package:
          description: Generates the package.json file
          package_generated: package.json generated

        project:
          description: |
            Creates a directory with the default neat project content.
            Description, author and keywords can be defined using the hash
            arguments.
          generation_done: "#{path} generated"
          generation_failed: "Cannot proceed to the generation of the project\n\n#{message}"

        source:
          description: |
            Generates a file in the source directory.
            A helper, functional and unit tests are created by default
            and can be disabled using the hash arguments syntax.

        spec:
          unit:
            description: "Generates a spec in the test/units directory"
          functional:
            description: "Generates a spec in the test/functionals directory"

        task:
          description: |
            Generates a <name> task in the tasks directory.
            Description and environment of the task can be defined
            using hash arguments.

        github_pages:
          description: |
            Generates a pages directory with a default site index.
          generation_done: "#{path} generated"
          generation_failed: "Cannot proceed to the generation of the pages files\n\n#{message}"

      docco:
        no_path: No paths specified for documentation generation.
        description: Generates the documentation through docco
        documentation_generated: Documentation successfully generated
        file_generated: "#{file} documentation processed"
        stylesheet_description: Generates the documentation stylesheet
        stylesheet_generated: Stylesheet successfully generated
        javascript_description: Generates the documentation javascript
        javascript_generated: Javascript successfully generated

    templates:
      no_template: "#{missing} can't be found\n\nExplored paths:\n#{paths}"
      template_for: "Template for #{file}"
      backend_for: 'Backend for #{ext}'
